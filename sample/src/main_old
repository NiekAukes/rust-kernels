use std::io::Write;

use cuda::dmem::DSend;
use nvvm;
use nvjitlink::{self, NVCompilerOption};

mod kern;

#[kernel]
fn gpu64(i: usize, a: &[f32]) -> f32 {
    a[i] + a[i + 1]
}

fn main() {
    println!("{:?}", gpu64);
    let name = "gpu64";
    let program = nvvm::NvvmProgram::new().unwrap();
    match program.add_module(gpu64, name.to_string()) {
        Ok(_) => println!("Module added successfully"),
        Err(e) => println!("Error adding module: {:?}", e),
    }

    let ptx = match program.compile(&[nvvm::NvvmOption::NoOpts]) {
        Ok(c) => c,
        Err(e) => {
            println!("Error compiling: {:?}", e);
            return;
        }
    };
    
    println!("PTX: {:?}", ptx);

    // output the ptx to a file
    let mut file = std::fs::File::create("gpu64.ptx").unwrap();
    file.write_all(ptx.as_slice()).unwrap();
    drop(file);

    /*
    let opt = [
        NVCompilerOption::Architecture("sm_52".to_string()),
        //NVCompilerOption::KernelsUsed("[gpu64]".to_string()),
        ];
    let ptxc = match nvjitlink::NVJitCompiler::new(&opt) {
        Ok(p) => p,
        Err(e) => {
            println!("Error creating compiler: {:?}", e);
            return;
        }
    };

    match ptxc.add_data(ptx.as_slice(), name, nvjitlink::NVLinkInputType::NVJITLINK_INPUT_PTX) {
        Ok(_) => println!("Data added successfully"),
        Err(e) => {
            println!("Error adding data: {:?}", e);
            return;
        }
    }
    
    let fin = match ptxc.compile() {
        Ok(x) => x,
        Err(e) => {
            println!("Error compiling ptx: {:?}", e);
            println!("Log: {:?}", ptxc.get_error_log());
            return;
        }
    };

    println!("Final bytecode: {:?}", fin);

    // export the bytecode to a file
    let mut file = std::fs::File::create("gpu64.cubin").unwrap();
    file.write_all(fin.as_slice()).unwrap();
    drop(file);

    */
    // ==============================================================================
    // ==========================  EXECUTION OF THE KERNEL ==========================
    // ==============================================================================

    let cuda = match cuda::CUDA::new() {
        Ok(c) => c,
        Err(e) => {
            println!("Error creating CUDA: {:?}", e);
            return;
        }
    };
    
    let module = match cuda.add_module(ptx.as_slice()) {
        Ok(m) => m,
        Err(e) => {
            println!("Error adding module: {:?}", e);
            return;
        }
    };

    let kernel = match module.get_kernel("simple") {
        Ok(k) => k,
        Err(e) => {
            println!("Error getting kernel: {:?}", e);
            return;
        }
    };
    let max = 256 * 256;
    let a: Vec<i32> = vec![1; max as usize];

    let threads_per_block = 256;
    let blocks_per_grid = 256 / threads_per_block;

    //let a_u8 = unsafe { a.align_to::<u8>().1 };
    let s = a.as_slice();
    let mut device_a = {
        match s.to_device(&cuda) {
            Ok(d) => d,
            Err(e) => {
                println!("Error sending data to device: {:?}", e);
                return;
            }
        }
    };

    match kernel.launch(&blocks_per_grid, &threads_per_block, 0, &[device_a.pass()]) {
        Ok(_) => println!("Kernel launched successfully"),
        Err(e) => println!("Error launching kernel: {:?}", e),
    }

    // get the result
    let mut a = vec![0i32; max as usize];
    device_a.retrieve(a.as_mut_slice()).unwrap();
    // take only the first 10 elements, if exists
    let res = if a.len() > 10 {
        &a[..10]
    } else {
        &a
    };
    println!("Result: {:?}", res);

}
